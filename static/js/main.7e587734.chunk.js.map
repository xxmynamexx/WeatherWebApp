{"version":3,"sources":["components/WeatherCard/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["WeatherCard","kelvinToCelsius","kelvins","toFixed","getIconName","weatherCode","_this$props","this","props","label","highTemp","lowTemp","description","react_default","a","createElement","className","concat","Component","Proptypes","number","string","FormControl","Form","Control","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","generateMessage","state","weatherData","message","handleSubmit","e","preventDefault","fetch","cityInput","then","res","json","setState","_this2","style","marginTop","marginBottom","Form_default","onSubmit","InputGroup_default","id","placeholder","aria-label","onChange","target","value","Append","Button_default","type","cod","components_WeatherCard_WeatherCard","name","sys","country","main","temp_max","weather","temp_min","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e587734.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Proptypes from 'prop-types'\r\nimport './style.css'\r\nimport '../../common/css/weather-icons.css'\r\nimport '../../common/css/weather-icons.min.css'\r\nimport '../../common/css/weather-icons-wind.css'\r\nimport '../../common/css/weather-icons-wind.min.css'\r\n\r\nclass WeatherCard extends Component {\r\n\r\n    kelvinToCelsius = (kelvins) => {\r\n        return (kelvins - 273.15).toFixed(1)\r\n    }\r\n\r\n    getIconName = (weatherCode) => {\r\n        switch(weatherCode){\r\n            case 201:\r\n                return 'wi-storm-showers'\r\n            case 202:\r\n                return 'wi-storm-showers'\r\n            case 210:\r\n                return 'wi-storm-showers'\r\n            case 211:\r\n                return 'wi-thunderstorm'\r\n            case 212:\r\n                return 'wi-thunderstorm'\r\n            case 221:\r\n                return 'wi-thunderstorm'\r\n            case 230:\r\n                return 'wi-thunderstorm'\r\n            case 231:\r\n                return 'wi-thunderstorm'\r\n            case 232:\r\n                return 'wi-thunderstorm'\r\n            case 300:\r\n                return 'wi-sprinkle'\r\n            case 301:\r\n                return 'wi-sprinkle'\r\n            case 302:\r\n                return 'wi-sprinkle'\r\n            case 310:\r\n                return 'wi-sprinkle'\r\n            case 311:\r\n                return 'wi-sprinkle'\r\n            case 312:\r\n                return 'wi-sprinkle'\r\n            case 313:\r\n                return 'wi-sprinkle'\r\n            case 314:\r\n                return 'wi-sprinkle'\r\n            case 321:\r\n                return 'wi-sprinkle'\r\n            case 500:\r\n                return 'wi-rain'\r\n            case 501:\r\n                return 'wi-rain'\r\n            case 502:\r\n                return 'wi-rain'\r\n            case 503:\r\n                return 'wi-rain'\r\n            case 504:\r\n                return 'wi-rain'\r\n            case 511:\r\n                return 'wi-rain'\r\n            case 520:\r\n                return 'wi-rain'\r\n            case 521:\r\n                return 'wi-rain'\r\n            case 522:\r\n                return 'wi-rain'\r\n            case 531:\r\n                return 'wi-rain'\r\n            case 600:\r\n                return 'wi-snow'\r\n            case 601:\r\n                return 'wi-snow'\r\n            case 602:\r\n                return 'wi-snow'\r\n            case 611:\r\n                return 'wi-snow'\r\n            case 612:\r\n                return 'wi-snow'\r\n            case 615:\r\n                return 'wi-snow'\r\n            case 616:\r\n                return 'wi-snow'\r\n            case 620:\r\n                return 'wi-snow'\r\n            case 621:\r\n                return 'wi-snow'\r\n            case 622:\r\n                return 'wi-snow'\r\n            case 701:\r\n                return 'wi-fog'\r\n            case 711:\r\n                return 'wi-smoke'\r\n            case 721:\r\n                return 'wi-day-haze'\r\n            case 731:\r\n                return 'wi-dust'\r\n            case 741:\r\n                return 'wi-fog'\r\n            case 751:\r\n                return 'wi-sandstorm'\r\n            case 761:\r\n                return 'wi-dust'\r\n            case 762:\r\n                return 'wi-dust' \r\n            case 771:\r\n                return 'wi-windy'\r\n            case 781:\r\n                return 'wi-tornado' \r\n            case 800:\r\n                return 'wi-day-sunny'\r\n            case 801:\r\n                return 'wi-cloud'\r\n            case 802:\r\n                return 'wi-cloudy' \r\n            case 803:\r\n                return 'wi-cloudy'\r\n            case 804:\r\n                return 'wi-cloudy'    \r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { label, highTemp, lowTemp, weatherCode, description } = this.props\r\n        return(\r\n        <div className='weatherCard'>\r\n            <div className=\"dayName\">{label}</div>\r\n            <div className=\"iconContainer\">\r\n                <i className={`wi ${this.getIconName(weatherCode)}`}></i>\r\n            </div>\r\n            <div className=\"description\">\r\n                {description}\r\n            </div>\r\n            <div className=\"temperature\">\r\n                <div>{this.kelvinToCelsius(highTemp)}&#176;C</div>\r\n                <div>{this.kelvinToCelsius(lowTemp)}&#176;C</div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nWeatherCard.Proptypes = {\r\n    weatherCode: Proptypes.number,\r\n    label: Proptypes.string,\r\n    description: Proptypes.string,\r\n    highTemp: Proptypes.number,\r\n    lowTemp: Proptypes.number\r\n}\r\n\r\nexport default WeatherCard","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport WeatherCard  from './components/WeatherCard/WeatherCard.js';\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\n\r\nconst FormControl = Form.Control\r\n//\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      cityInput: null,\r\n      weatherData: null,\r\n    }\r\n  }\r\n  generateMessage = () => {\r\n    if (this.state.weatherData !== null) {\r\n      return this.state.weatherData.message\r\n    } else {\r\n      return ''\r\n    }\r\n  }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.cityInput}&APPID=01cfc6c2e6ed975cd2864678e71e55e2`).then((res)=>{\r\n       return res.json()\r\n    }).then((res) => {\r\n      this.setState({weatherData: res})\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <header className=\"header\">Weather App</header>\r\n        <div style={{marginTop: '0px', marginBottom: '10px'}}>Application that gives the current weather forecast of a city</div>\r\n        <Form style={{marginBottom: '40px'}} onSubmit={(e) => this.handleSubmit(e)}>\r\n          <InputGroup className=\"mb-3\">\r\n            <FormControl\r\n              id='cityName'\r\n              placeholder=\"City name (ex. Vancouver,CA)\"\r\n              aria-label=\"city name\"\r\n              onChange={(e) => this.setState({cityInput: e.target.value})}\r\n            />\r\n            <InputGroup.Append>\r\n              <Button type='submit'>Submit</Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n        </Form>\r\n        <div className=\"weatherCardContainer\">\r\n        {this.state.weatherData !== null && this.state.weatherData.cod === 200 ? (\r\n          <WeatherCard \r\n            label={`${this.state.weatherData.name}, ${this.state.weatherData.sys.country}`} \r\n            highTemp={this.state.weatherData.main.temp_max} \r\n            description={this.state.weatherData.weather[0].description}\r\n            lowTemp={this.state.weatherData.main.temp_min} \r\n            weatherCode={this.state.weatherData.weather[0].id}\r\n          />\r\n        ) : this.generateMessage()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}